package com.greendao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEMO_GREEN".
*/
public class DemoGreenDao extends AbstractDao<DemoGreen, Long> {

    public static final String TABLENAME = "DEMO_GREEN";

    /**
     * Properties of entity DemoGreen.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property _id = new Property(0, Long.class, "_id", true, "_id");
        public final static Property Ownerid = new Property(1, Integer.class, "ownerid", false, "OWNERID");
        public final static Property Sectionid = new Property(2, Integer.class, "sectionid", false, "SECTIONID");
        public final static Property Bookid = new Property(3, Integer.class, "bookid", false, "BOOKID");
        public final static Property Pageid = new Property(4, Integer.class, "pageid", false, "PAGEID");
        public final static Property Type = new Property(5, Integer.class, "type", false, "TYPE");
        public final static Property ActivityType = new Property(6, Integer.class, "activityType", false, "ACTIVITY_TYPE");
        public final static Property ActivityId = new Property(7, Integer.class, "activityId", false, "ACTIVITY_ID");
        public final static Property Counter = new Property(8, Integer.class, "counter", false, "COUNTER");
        public final static Property X = new Property(9, Integer.class, "x", false, "X");
        public final static Property Y = new Property(10, Integer.class, "y", false, "Y");
        public final static Property Ab_x = new Property(11, Float.class, "ab_x", false, "AB_X");
        public final static Property Ab_y = new Property(12, Float.class, "ab_y", false, "AB_Y");
        public final static Property Fx = new Property(13, Integer.class, "fx", false, "FX");
        public final static Property Fy = new Property(14, Integer.class, "fy", false, "FY");
        public final static Property Angle = new Property(15, Integer.class, "angle", false, "ANGLE");
        public final static Property Force = new Property(16, Integer.class, "force", false, "FORCE");
        public final static Property Timelong = new Property(17, Long.class, "timelong", false, "TIMELONG");
        public final static Property Color = new Property(18, Integer.class, "color", false, "COLOR");
        public final static Property Weight = new Property(19, Float.class, "weight", false, "WEIGHT");
        public final static Property UserId = new Property(20, String.class, "userId", false, "USER_ID");
    }


    public DemoGreenDao(DaoConfig config) {
        super(config);
    }
    
    public DemoGreenDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEMO_GREEN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: _id
                "\"OWNERID\" INTEGER," + // 1: ownerid
                "\"SECTIONID\" INTEGER," + // 2: sectionid
                "\"BOOKID\" INTEGER," + // 3: bookid
                "\"PAGEID\" INTEGER," + // 4: pageid
                "\"TYPE\" INTEGER," + // 5: type
                "\"ACTIVITY_TYPE\" INTEGER," + // 6: activityType
                "\"ACTIVITY_ID\" INTEGER," + // 7: activityId
                "\"COUNTER\" INTEGER," + // 8: counter
                "\"X\" INTEGER," + // 9: x
                "\"Y\" INTEGER," + // 10: y
                "\"AB_X\" REAL," + // 11: ab_x
                "\"AB_Y\" REAL," + // 12: ab_y
                "\"FX\" INTEGER," + // 13: fx
                "\"FY\" INTEGER," + // 14: fy
                "\"ANGLE\" INTEGER," + // 15: angle
                "\"FORCE\" INTEGER," + // 16: force
                "\"TIMELONG\" INTEGER," + // 17: timelong
                "\"COLOR\" INTEGER," + // 18: color
                "\"WEIGHT\" REAL," + // 19: weight
                "\"USER_ID\" TEXT);"); // 20: userId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEMO_GREEN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DemoGreen entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        Integer ownerid = entity.getOwnerid();
        if (ownerid != null) {
            stmt.bindLong(2, ownerid);
        }
 
        Integer sectionid = entity.getSectionid();
        if (sectionid != null) {
            stmt.bindLong(3, sectionid);
        }
 
        Integer bookid = entity.getBookid();
        if (bookid != null) {
            stmt.bindLong(4, bookid);
        }
 
        Integer pageid = entity.getPageid();
        if (pageid != null) {
            stmt.bindLong(5, pageid);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(6, type);
        }
 
        Integer activityType = entity.getActivityType();
        if (activityType != null) {
            stmt.bindLong(7, activityType);
        }
 
        Integer activityId = entity.getActivityId();
        if (activityId != null) {
            stmt.bindLong(8, activityId);
        }
 
        Integer counter = entity.getCounter();
        if (counter != null) {
            stmt.bindLong(9, counter);
        }
 
        Integer x = entity.getX();
        if (x != null) {
            stmt.bindLong(10, x);
        }
 
        Integer y = entity.getY();
        if (y != null) {
            stmt.bindLong(11, y);
        }
 
        Float ab_x = entity.getAb_x();
        if (ab_x != null) {
            stmt.bindDouble(12, ab_x);
        }
 
        Float ab_y = entity.getAb_y();
        if (ab_y != null) {
            stmt.bindDouble(13, ab_y);
        }
 
        Integer fx = entity.getFx();
        if (fx != null) {
            stmt.bindLong(14, fx);
        }
 
        Integer fy = entity.getFy();
        if (fy != null) {
            stmt.bindLong(15, fy);
        }
 
        Integer angle = entity.getAngle();
        if (angle != null) {
            stmt.bindLong(16, angle);
        }
 
        Integer force = entity.getForce();
        if (force != null) {
            stmt.bindLong(17, force);
        }
 
        Long timelong = entity.getTimelong();
        if (timelong != null) {
            stmt.bindLong(18, timelong);
        }
 
        Integer color = entity.getColor();
        if (color != null) {
            stmt.bindLong(19, color);
        }
 
        Float weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(20, weight);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(21, userId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DemoGreen entity) {
        stmt.clearBindings();
 
        Long _id = entity.get_id();
        if (_id != null) {
            stmt.bindLong(1, _id);
        }
 
        Integer ownerid = entity.getOwnerid();
        if (ownerid != null) {
            stmt.bindLong(2, ownerid);
        }
 
        Integer sectionid = entity.getSectionid();
        if (sectionid != null) {
            stmt.bindLong(3, sectionid);
        }
 
        Integer bookid = entity.getBookid();
        if (bookid != null) {
            stmt.bindLong(4, bookid);
        }
 
        Integer pageid = entity.getPageid();
        if (pageid != null) {
            stmt.bindLong(5, pageid);
        }
 
        Integer type = entity.getType();
        if (type != null) {
            stmt.bindLong(6, type);
        }
 
        Integer activityType = entity.getActivityType();
        if (activityType != null) {
            stmt.bindLong(7, activityType);
        }
 
        Integer activityId = entity.getActivityId();
        if (activityId != null) {
            stmt.bindLong(8, activityId);
        }
 
        Integer counter = entity.getCounter();
        if (counter != null) {
            stmt.bindLong(9, counter);
        }
 
        Integer x = entity.getX();
        if (x != null) {
            stmt.bindLong(10, x);
        }
 
        Integer y = entity.getY();
        if (y != null) {
            stmt.bindLong(11, y);
        }
 
        Float ab_x = entity.getAb_x();
        if (ab_x != null) {
            stmt.bindDouble(12, ab_x);
        }
 
        Float ab_y = entity.getAb_y();
        if (ab_y != null) {
            stmt.bindDouble(13, ab_y);
        }
 
        Integer fx = entity.getFx();
        if (fx != null) {
            stmt.bindLong(14, fx);
        }
 
        Integer fy = entity.getFy();
        if (fy != null) {
            stmt.bindLong(15, fy);
        }
 
        Integer angle = entity.getAngle();
        if (angle != null) {
            stmt.bindLong(16, angle);
        }
 
        Integer force = entity.getForce();
        if (force != null) {
            stmt.bindLong(17, force);
        }
 
        Long timelong = entity.getTimelong();
        if (timelong != null) {
            stmt.bindLong(18, timelong);
        }
 
        Integer color = entity.getColor();
        if (color != null) {
            stmt.bindLong(19, color);
        }
 
        Float weight = entity.getWeight();
        if (weight != null) {
            stmt.bindDouble(20, weight);
        }
 
        String userId = entity.getUserId();
        if (userId != null) {
            stmt.bindString(21, userId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public DemoGreen readEntity(Cursor cursor, int offset) {
        DemoGreen entity = new DemoGreen( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // _id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // ownerid
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // sectionid
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // bookid
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // pageid
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // type
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // activityType
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // activityId
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // counter
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // x
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // y
            cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11), // ab_x
            cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12), // ab_y
            cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // fx
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // fy
            cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // angle
            cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16), // force
            cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17), // timelong
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // color
            cursor.isNull(offset + 19) ? null : cursor.getFloat(offset + 19), // weight
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20) // userId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DemoGreen entity, int offset) {
        entity.set_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setOwnerid(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setSectionid(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setBookid(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setPageid(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setActivityType(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setActivityId(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setCounter(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setX(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setY(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setAb_x(cursor.isNull(offset + 11) ? null : cursor.getFloat(offset + 11));
        entity.setAb_y(cursor.isNull(offset + 12) ? null : cursor.getFloat(offset + 12));
        entity.setFx(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setFy(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setAngle(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setForce(cursor.isNull(offset + 16) ? null : cursor.getInt(offset + 16));
        entity.setTimelong(cursor.isNull(offset + 17) ? null : cursor.getLong(offset + 17));
        entity.setColor(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setWeight(cursor.isNull(offset + 19) ? null : cursor.getFloat(offset + 19));
        entity.setUserId(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(DemoGreen entity, long rowId) {
        entity.set_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(DemoGreen entity) {
        if(entity != null) {
            return entity.get_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DemoGreen entity) {
        return entity.get_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
